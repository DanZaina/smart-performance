---
import { Image } from "astro:assets";
import logoImage from "../../assets/logo/smart-performance-logo.png";
import SocialIcons from "../contact/SocialIcons.astro";
// Navigation Items Structure
const navItems = [
  {
    title: "ABOUT",
    href: "/about",
  },
  {
    title: "OFF-ROAD TRAINING",
    href: "#",
    dropdown: [
      { title: "ALL COURSES", href: "/courses" },
      { title: "2-DAY GS OFF-ROAD TRAINING", href: "/gs-training" },
      { title: "ONE-DAY DUAL SPORT COURSE", href: "/dual-sport" },
      { title: "PRIVATE ONE-ON-ONE TRAINING", href: "/private-training" },
      { title: "MAINTENANCE COURSE", href: "/maintenance" },
    ],
  },
  {
    title: "SCHEDULES & PRICING",
    href: "/schedules",
  },
  {
    title: "GALLERY",
    href: "/gallery",
  },
  {
    title: "FAQS",
    href: "/faqs",
  },
  {
    title: "CONTACT US",
    href: "/contact",
  },
  {
    title: "FOR SALE",
    href: "/contact",
  },
  {
    title: "SMART ADVENTURES",
    href: "/adventures",
  },
];
---

<header class="nav-container transition-colors duration-300" id="main-nav">
  <!-- Social Icons Bar -->
  <div class="hidden lg:block border-b border-white/10 py-2">
    <div class="container xl:max-w-[1280px] mx-auto px-4">
      <div class="flex justify-end py-2">
        <SocialIcons theme="light" className="justify-center" />
      </div>
    </div>
  </div>

  <!-- Main Navigation -->
  <nav class="container xl:max-w-[1280px] mx-auto px-4 py-4">
    <div class="flex items-center justify-between">
      <!-- Logo -->
      <a href="/" class="shrink-0">
        <Image
          src={logoImage}
          alt="SMART Performance Centre"
          class="h-12 w-auto"
          width={200}
          height={48}
        />
      </a>

      <!-- Desktop Navigation -->
      <div class="hidden lg:flex items-center space-x-8">
        {
          navItems.map((item) => (
            <div class="relative group">
              {item.dropdown ? (
                <>
                  <button class="nav-link group flex items-center">
                    {item.title}
                    <svg
                      class="ml-1 w-4 h-4 transition-transform duration-200 group-hover:rotate-180"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M19 9l-7 7-7-7"
                      />
                    </svg>
                  </button>
                  <div class="absolute left-0 top-full mt-2 w-72 invisible group-hover:visible opacity-0 group-hover:opacity-100 transition-all duration-200">
                    <div class="bg-dark/95 backdrop-blur-sm p-4 rounded-lg shadow-lg border border-white/10">
                      {item.dropdown.map((dropdownItem) => (
                        <a
                          href={dropdownItem.href}
                          class="block py-2 px-4 text-light hover:text-blue transition-colors duration-200 font-barlow text-lg"
                        >
                          {dropdownItem.title}
                        </a>
                      ))}
                    </div>
                  </div>
                </>
              ) : (
                <a href={item.href} class="nav-link">
                  {item.title}
                </a>
              )}
            </div>
          ))
        }
      </div>

      <!-- Mobile Menu Button -->
      <button
        id="mobile-menu-button"
        class="lg:hidden text-light p-2"
        aria-label="Menu"
      >
        <div class="hamburger">
          <span></span>
          <span></span>
          <span></span>
        </div>
      </button>
    </div>

    <!-- Mobile Menu -->
    <div id="mobile-menu" class="lg:hidden hidden">
      <div class="py-4 space-y-2">
        {
          navItems.map((item) => (
            <div>
              {item.dropdown ? (
                <div class="mobile-dropdown">
                  <button class="w-full py-2 text-light hover:text-blue flex items-center justify-between font-barlow">
                    {item.title}
                    <svg
                      class="w-4 h-4 transition-transform duration-200"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M19 9l-7 7-7-7"
                      />
                    </svg>
                  </button>
                  <div class="hidden pl-4 space-y-2 mt-2">
                    {item.dropdown.map((dropdownItem) => (
                      <a
                        href={dropdownItem.href}
                        class="block py-2 text-light hover:text-blue font-barlow"
                      >
                        {dropdownItem.title}
                      </a>
                    ))}
                  </div>
                </div>
              ) : (
                <a
                  href={item.href}
                  class="block py-2 text-light hover:text-blue font-barlow"
                >
                  {item.title}
                </a>
              )}
            </div>
          ))
        }
      </div>
      <div class="border-t border-white/10 mt-4 pt-4">
        <SocialIcons className="justify-center" />
      </div>
    </div>
  </nav>
</header>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // Cache all DOM elements
    const elements = {
      nav: document.getElementById("main-nav"),
      mobileBtn: document.getElementById("mobile-menu-button"),
      mobileMenu: document.getElementById("mobile-menu"),
      hamburger: document
        .getElementById("mobile-menu-button")
        ?.querySelector(".hamburger"),
      dropdowns: document.querySelectorAll(".mobile-dropdown"),
    };

    // State management
    const state = {
      scrollPos: 0,
      scrollThreshold: 50,
      isMenuOpen: false,
    };

    // Mobile menu toggle function
    const toggleMobileMenu = () => {
      if (!elements.mobileMenu || !elements.hamburger) return;

      state.isMenuOpen = !state.isMenuOpen;
      elements.mobileMenu.classList.toggle("hidden");
      elements.hamburger.classList.toggle("active");

      // Optional: Prevent body scroll when menu is open
      document.body.style.overflow = state.isMenuOpen ? "hidden" : "";
    };

    // Handle dropdowns in mobile menu
    const setupMobileDropdowns = () => {
      elements.dropdowns.forEach((dropdown) => {
        const button = dropdown.querySelector("button");
        const content = dropdown.querySelector("div");
        const arrow = button?.querySelector("svg");

        button?.addEventListener("click", (e) => {
          e.stopPropagation();
          const isHidden = content?.classList.contains("hidden");

          content?.classList.toggle("hidden");
          if (arrow) {
            arrow.style.transform = isHidden ? "rotate(180deg)" : "";
          }
        });
      });
    };

    // Handle scroll behavior
    const handleScroll = () => {
      if (!elements.nav) return;

      const currentScrollPos = window.scrollY;
      const isOverThreshold = currentScrollPos > state.scrollThreshold;
      const shouldShowBackground = isOverThreshold || state.isMenuOpen;

      // Add/remove class based on scroll position or menu state
      elements.nav.classList.toggle("nav-scrolled", shouldShowBackground);

      state.scrollPos = currentScrollPos;
    };

    // Event Listeners
    const setupEventListeners = () => {
      // Mobile menu toggle
      elements.mobileBtn?.addEventListener("click", toggleMobileMenu);

      // Scroll event
      window.addEventListener("scroll", handleScroll, { passive: true });

      // Resize event
      window.addEventListener(
        "resize",
        () => {
          handleScroll();
          // Optional: Close mobile menu on screen resize
          if (window.innerWidth >= 1024 && state.isMenuOpen) {
            toggleMobileMenu();
          }
        },
        { passive: true },
      );

      // Optional: Close menu when clicking outside
      document.addEventListener("click", (e) => {
        if (
          state.isMenuOpen &&
          !elements.mobileMenu?.contains(e.target as Node) &&
          !elements.mobileBtn?.contains(e.target as Node)
        ) {
          toggleMobileMenu();
        }
      });
    };

    // Initialize
    const init = () => {
      setupMobileDropdowns();
      setupEventListeners();
      handleScroll(); // Initial check
    };

    init();
  });
</script>

<style>
  .hamburger {
    @apply w-6 h-6 flex flex-col justify-around;
  }

  .hamburger span {
    @apply w-full h-0.5 bg-light transition-all duration-300 transform origin-left;
  }

  .hamburger.active span:first-child {
    @apply rotate-45;
  }

  .hamburger.active span:nth-child(2) {
    @apply opacity-0;
  }

  .hamburger.active span:last-child {
    @apply -rotate-45;
  }

  .nav-scrolled {
    @apply bg-dark/95 backdrop-blur-sm;
  }

  /* Optional: Add transition for background color change */
  .nav-container {
    @apply transition-all duration-300 ease-in-out;
  }
</style>
